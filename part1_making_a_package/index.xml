<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Making a package on OxRSE Python Packaging Workshop</title>
    <link>https://oxfordrse.github.io/python-packaging-course/part1_making_a_package/</link>
    <description>Recent content in Making a package on OxRSE Python Packaging Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://oxfordrse.github.io/python-packaging-course/part1_making_a_package/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From scripts to modules</title>
      <link>https://oxfordrse.github.io/python-packaging-course/part1_making_a_package/from_scripts_to_modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oxfordrse.github.io/python-packaging-course/part1_making_a_package/from_scripts_to_modules/</guid>
      <description>Functions, modules, packages  functions, classes  # operations.py def add(a,b): return a+b  modules Collection of python objects (classes, functions, variables)  from operations import add # &amp;#34;From file (or module) operations.py import object add&amp;#34; result = add(1,2)  packages Collection of modules (.py files)  from calculator.operations import add from calculator.representations import hexa a = hexa(1) b = hexa(2) result = add(a,b) Activity 1 - Turning scripts into a collection of functions Let&amp;rsquo;s rewrite both scripts scripts/analysis.</description>
    </item>
    
    <item>
      <title>Separating methods from parameters and data</title>
      <link>https://oxfordrse.github.io/python-packaging-course/part1_making_a_package/separating_methods_from_parameters_and_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oxfordrse.github.io/python-packaging-course/part1_making_a_package/separating_methods_from_parameters_and_data/</guid>
      <description>Roughly speaking, a numerical experiment is made of three components:
 The data (dataset, or parameters of simulation) The operations performed on this data The output (numbers, plots)  As we saw, scripts base.py, and show_extremes.py mix the three above components into a single .py file, making the analysis difficult (sometimes even risky!) to modify and test. Re-using part of the code means copying and pasting blocks of code out of their original context, which is a dangerous practice.</description>
    </item>
    
    <item>
      <title>The tstools package</title>
      <link>https://oxfordrse.github.io/python-packaging-course/part1_making_a_package/the_tstools_package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oxfordrse.github.io/python-packaging-course/part1_making_a_package/the_tstools_package/</guid>
      <description>We now have a tstools directory with 3 modules:
analysis1/ tstools/ __init__.py moments.py vis.py show_extremes.py data/ In way, the directory tstools is already a pacakge, in the sens that it is possible to import each functions from the modules:
import tstools.moments from tstools.vis import plot_histogram timeseries = np.genfromtxt(&amp;#34;./data/brownian.csv&amp;#34;, delimiter=&amp;#34;,&amp;#34;) mean = tstools.moments.get_mean(timeseries) fig, ax = tstools.moments.plot_histogram(timeseries) Let&amp;rsquo;s try to import the package as a whole:
# compute-mean.py import numpy as np import tstools timeseries = np.</description>
    </item>
    
    <item>
      <title>init dot pie</title>
      <link>https://oxfordrse.github.io/python-packaging-course/part1_making_a_package/init_dot_pie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oxfordrse.github.io/python-packaging-course/part1_making_a_package/init_dot_pie/</guid>
      <description>Whenever you import a directory, Python will look for a file init.py at the root of this directory, and, if found, will import it. It is the presence of this initialization file that truly makes the tstools directory a Python package1.
As a first example, let&amp;rsquo;s add the following code to __init__.py:
# tstools/__init__.py from os.path import basename filename = basename(__file__) print(f&amp;#34;Hello from {filename}&amp;#34;) If we now import the tstools package:</description>
    </item>
    
  </channel>
</rss>
