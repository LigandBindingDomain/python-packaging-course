<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reusing a package across analyses on OxRSE Python Packaging Workshop</title>
    <link>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/</link>
    <description>Recent content in Reusing a package across analyses on OxRSE Python Packaging Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Another analysis</title>
      <link>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/another-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/another-analysis/</guid>
      <description>Let&amp;rsquo;s say that we have another directory analysis2, that contains another but similar dataset to analysis1/data/brownian.csv. Now that we&amp;rsquo;ve structured our software into a python package, we would like to reuse that package for our second analysis.
Let us simply write a python scripts analysis2.py, that imports the tstools package created in the previous section.
analysis2/ analysis2.py data/ timeseries.csv # analysis2/analysis2.py import numpy as np import tstools timeseries = np.genfromtxt(&amp;#34;./data/data_analysis2.csv&amp;#34;) fig, ax = tstools.</description>
    </item>
    
    <item>
      <title>Where does python look for packages?</title>
      <link>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/where-does-python-look-for-packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/where-does-python-look-for-packages/</guid>
      <description>When using the import statement, the python interpreter looks for the package (or module) in a list of directories known as the python path.
Let&amp;rsquo;s find out about what directories constitute the python path:
$ python &amp;gt;&amp;gt;&amp;gt; import sys &amp;gt;&amp;gt;&amp;gt; sys.path The order of this list matters: it is the order in which python looks into the directories that constitute the python path. To begin with, Python first looks in the current directory.</description>
    </item>
    
    <item>
      <title>setuptools, setup dot pie and pip</title>
      <link>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/setuptools-and-setup-do-_pie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/setuptools-and-setup-do-_pie/</guid>
      <description>The recommended way to install a package is to use the setuptools library in conjunction with pip, the official python package manager. Effectively, this approach is roughly equivalent to copying the package to the site-packages directory, expect that the process in automated.
pip Pip is the de facto package manager for Python packages. It&amp;rsquo;s main job is to install, remove, upgrade, configure and manage Python packages, both available locally on your machine but also hosted on on the Python Package Index (PyPI).</description>
    </item>
    
    <item>
      <title>Maintaining your package indepently from the anaylises that use it</title>
      <link>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/maintaining-your-pkg-independantly-from-your-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/maintaining-your-pkg-independantly-from-your-analysis/</guid>
      <description>In the previous section you made your package &amp;ldquo;pip installable&amp;rdquo; by creating a setup.py file. You then installed the package, effectively making accessible between different analysis directories.
However, a package is never set in stone: as you work on your analyses, you will almost certainly likely make changes to it, for instance to add functionalities or to fix bugs.
You could just reinstall the package each time you make a modification to it, but this obviously becomes tedious if you are constantly making changes (maybe to hunt down a bug) and/or testing your package.</description>
    </item>
    
    <item>
      <title>Summary and break</title>
      <link>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/summary_and_break/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oxfordrse.github.io/python-packaging-course/part2_reusing_a_package/summary_and_break/</guid>
      <description>In order to reuse our package across different analyses, we must install it. In effect, this means copying the package into a directory that is in the python path. This shouldn&amp;rsquo;t be done manually, but instead using the setuptools package to write a setup.py file that is then processed by the pip install command. It would be both cumbersome and error-prone to have to reinstall the package each time we make a change to it (to fix a bug for instance).</description>
    </item>
    
  </channel>
</rss>
